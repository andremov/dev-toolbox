---
import {
  aiAndData,
  audioAndVideo,
  designAndUI,
  developmentLibrariesAndFrameworks,
  documentationAndLearning,
  fontsAndTypography,
  openSourceToolsAndUtilities,
  allTags
 } from '../utils/resources';
import SingleResourceGridSection from './single-resource-grid-section.astro';

// Get all unique tags from the data
---

<div class="container mx-auto mb-8 mt-6 md:mt-12 px-2">
  <!-- Filter Controls -->
  <div class="mb-6">
    <div class="flex flex-wrap gap-2 mb-4 justify-center">
      <button 
        class="filter-btn ring-2 ring-violet-500 ring-opacity-50 rounded-full py-1 px-3 text-sm border border-neutral-600 bg-neutral-800 text-white hover:bg-neutral-700 transition-colors"
        data-tag="all"
      >
        All
      </button>
      {allTags.map((tag) => (
        <button 
          class="filter-btn rounded-full py-1 px-3 text-sm border border-neutral-600 bg-neutral-900 text-gray-300 hover:bg-neutral-700 hover:text-white transition-colors"
          data-tag={tag}
        >
          {tag}
        </button>
      ))}
    </div>
  </div>

  <!-- Resources Grid -->
  <h2 class="text-2xl font-bold mb-4 text-center">
    AI and Data Resources
  </h2>
  <SingleResourceGridSection tools={aiAndData} />

  <br /><br /><br />
  
  <h2 class="text-2xl font-bold mb-4 text-center">
    Audio and Video Resources
  </h2>
  <SingleResourceGridSection tools={audioAndVideo} />

  <br /><br /><br />

  <h2 class="text-2xl font-bold mb-4 text-center">
    Design and UI Resources
  </h2>
  <SingleResourceGridSection tools={designAndUI} />

  <br /><br /><br />

  <h2 class="text-2xl font-bold mb-4 text-center">
    Development Libraries and Frameworks
  </h2>
  <SingleResourceGridSection tools={developmentLibrariesAndFrameworks} />

  <br /><br /><br />

  <h2 class="text-2xl font-bold mb-4 text-center">
    Documentation and Learning Resources
  </h2>
  <SingleResourceGridSection tools={documentationAndLearning} />

  <br /><br /><br />

  <h2 class="text-2xl font-bold mb-4 text-center">
    Fonts and Typography Resources
  </h2>
  <SingleResourceGridSection tools={fontsAndTypography} />

  <br /><br /><br />

  <h2 class="text-2xl font-bold mb-4 text-center">
    Open Source Tools and Utilities
  </h2>
  <SingleResourceGridSection tools={openSourceToolsAndUtilities} />
</div>

<script>
  // Lazy loading functionality
  function initLazyLoading() {
    const lazyImages = document.querySelectorAll('.lazy-image');
    
    if ('IntersectionObserver' in window) {
      const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const img = entry.target as HTMLImageElement;
            const src = img.getAttribute('data-src');
            if (src) {
              img.src = src;
              img.classList.remove('lazy-image');
              img.classList.add('loaded');
              observer.unobserve(img);
            }
          }
        });
      }, {
        rootMargin: '50px' // Start loading 50px before the image comes into view
      });

      lazyImages.forEach(img => imageObserver.observe(img));
    } else {
      // Fallback for browsers that don't support IntersectionObserver
      lazyImages.forEach(img => {
        const htmlImg = img as HTMLImageElement;
        const src = htmlImg.getAttribute('data-src');
        if (src) {
          htmlImg.src = src;
        }
      });
    }
  }

  // Filter functionality
  const filterBtns = document.querySelectorAll('.filter-btn');
  const toolItems = document.querySelectorAll('.tool-item');
  const toolCount = document.getElementById('tool-count');

  function updateToolCount(visibleCount: number) {
    if (toolCount) {
      toolCount.textContent = `Showing ${visibleCount} tools`;
    }
  }

  filterBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      const selectedTag = btn.getAttribute('data-tag');
      if (!selectedTag) return;
      
      // Update active button
      filterBtns.forEach(b => b.classList.remove('ring-2', 'ring-violet-500', 'ring-opacity-50', 'bg-neutral-800', 'text-white'));
      filterBtns.forEach(b => b.classList.add('bg-neutral-900', 'text-gray-300'));
      
      btn.classList.add('ring-2', 'ring-violet-500', 'ring-opacity-50', 'bg-neutral-800', 'text-white');
      btn.classList.remove('bg-neutral-900', 'text-gray-300');

      // Filter tools and count visible items
      let visibleCount = 0;
      toolItems.forEach(item => {
        const itemTags = item.getAttribute('data-tags');
        const htmlElement = item as HTMLElement;
        
        if (selectedTag === 'all' || (itemTags && itemTags.includes(selectedTag))) {
          htmlElement.style.display = 'block';
          htmlElement.style.animation = 'fadeIn 0.3s ease-in';
          visibleCount++;
        } else {
          htmlElement.style.display = 'none';
        }
      });

      // Update tool count
      updateToolCount(visibleCount);
      
      // Re-initialize lazy loading for newly visible images
      setTimeout(() => {
        initLazyLoading();
      }, 100);
    });
  });

  // Initialize lazy loading when the page loads
  document.addEventListener('DOMContentLoaded', () => {
    initLazyLoading();
  });

  // Also initialize immediately in case DOMContentLoaded already fired
  initLazyLoading();
</script>

<style>
  .lazy-image {
    background: linear-gradient(90deg, #374151 25%, #4B5563 50%, #374151 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
  }

  .lazy-image.loaded {
    animation: none;
    background: none;
  }

  @keyframes loading {
    0% {
      background-position: 200% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>