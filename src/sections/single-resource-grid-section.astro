---
import ResourceTile from '../components/resource-tile.astro';
import type { Resource } from '../utils/types';

export interface Props {
  tools: Resource[];
}

const { tools } = Astro.props;
---

  
<div class="tools-grid grid grid-cols-1 md:grid-cols-3 xl:grid-cols-5 gap-4" id="tools-grid">
  {
    tools.map((tool) => (
      <div class="tool-item" data-tags={tool.tags.join(',')}>
        <ResourceTile {...tool} lazy={true} />
      </div>
    ))
  }
</div>

<script>
  // Lazy loading functionality
  function initLazyLoading() {
    const lazyImages = document.querySelectorAll('.lazy-image');
    
    if ('IntersectionObserver' in window) {
      const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const img = entry.target as HTMLImageElement;
            const src = img.getAttribute('data-src');
            if (src) {
              img.src = src;
              img.classList.remove('lazy-image');
              img.classList.add('loaded');
              observer.unobserve(img);
            }
          }
        });
      }, {
        rootMargin: '50px' // Start loading 50px before the image comes into view
      });

      lazyImages.forEach(img => imageObserver.observe(img));
    } else {
      // Fallback for browsers that don't support IntersectionObserver
      lazyImages.forEach(img => {
        const htmlImg = img as HTMLImageElement;
        const src = htmlImg.getAttribute('data-src');
        if (src) {
          htmlImg.src = src;
        }
      });
    }
  }

  // Filter functionality
  const filterBtns = document.querySelectorAll('.filter-btn');
  const toolItems = document.querySelectorAll('.tool-item');
  const toolCount = document.getElementById('tool-count');

  function updateToolCount(visibleCount: number) {
    if (toolCount) {
      toolCount.textContent = `Showing ${visibleCount} tools`;
    }
  }

  filterBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      const selectedTag = btn.getAttribute('data-tag');
      if (!selectedTag) return;
      
      // Update active button
      filterBtns.forEach(b => b.classList.remove('ring-2', 'ring-violet-500', 'ring-opacity-50', 'bg-neutral-800', 'text-white'));
      filterBtns.forEach(b => b.classList.add('bg-neutral-900', 'text-gray-300'));
      
      btn.classList.add('ring-2', 'ring-violet-500', 'ring-opacity-50', 'bg-neutral-800', 'text-white');
      btn.classList.remove('bg-neutral-900', 'text-gray-300');

      // Filter tools and count visible items
      let visibleCount = 0;
      toolItems.forEach(item => {
        const itemTags = item.getAttribute('data-tags');
        const htmlElement = item as HTMLElement;
        
        if (selectedTag === 'all' || (itemTags && itemTags.includes(selectedTag))) {
          htmlElement.style.display = 'block';
          htmlElement.style.animation = 'fadeIn 0.3s ease-in';
          visibleCount++;
        } else {
          htmlElement.style.display = 'none';
        }
      });

      // Update tool count
      updateToolCount(visibleCount);
      
      // Re-initialize lazy loading for newly visible images
      setTimeout(() => {
        initLazyLoading();
      }, 100);
    });
  });

  // Initialize lazy loading when the page loads
  document.addEventListener('DOMContentLoaded', () => {
    initLazyLoading();
  });

  // Also initialize immediately in case DOMContentLoaded already fired
  initLazyLoading();
</script>

<style>
  .lazy-image {
    background: linear-gradient(90deg, #374151 25%, #4B5563 50%, #374151 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
  }

  .lazy-image.loaded {
    animation: none;
    background: none;
  }

  @keyframes loading {
    0% {
      background-position: 200% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>